// https://cursos.alura.com.br/course/vue-parte1/task/23178

$ npm install vue-cli@2.7.0 -g
$ vue --version alurapic
$ vue  init webpack-simple alurapic
$ vue init webpack-simple calopsita

 	vue-cli · Generated "alurapic".
$ 
    1-  cd alurapic
    2 - npm install
    3 - npm run dev


-- babel é u m transpiler
   babel pega EcmaScript 2015(es6) e transforma para ecmascript 5

-- webpacker é um module bundler



=================================================================
=  								parte - 1                       =
=================================================================
# MÓDULO 01
	Neste capítulo aprendemos:
		instalar e utilizar o Vue CLI
		criar do zero um novo projeto
		estrutur		estrutura de um template
		relação entre index.html, main.js e App.vue
		como renderização de um template é feita
		data binding unidirecional através de interpolação
		o mecanismo de live reloading

# MÓDULO 02
	Neste capítulo aprendemos:
		data binding unidirecional em atributos através da diretiva v-bind
		atalho para v-bind
		a diretiva v-for

# MÓDULO 03
	Instalação: npm install vue-resource@1.0.3 --save

	inciar api: 		    npm start
	API escutando na porta: 3000
	ulr: 					http://localhost:3000/v1/fotos


	Neste capítulo aprendemos:
		a subir uma API para ser consumida pela nossa aplicação
		a entender a separação entre cliente e API
		a baixar e registrar o módulo VueResource
		o suporte à lifecycle hooks que todo componente possui
		que recursos no global view object ficam disponíveis para todas as outras view
		consumir uma API através de $http
		o conceito de promise
		enxergar ainda melhor o poder do data binding

# MÓDULO 04
	Neste capítulo aprendemos:
		a estilizar um componente
		boa prática na organização do projeto
		a criar um componente reutilizável
		como passar parâmetro para um componente (comunicação)
		o conceito de slot e preservação de conteúdo
		importação de um componente em outro
		a definir e delimitar o escopo de estilos ao componente no qual foram declarados

		-- para   <style lang='sass'> 
		npm install sass-loader --save-dev

		npm install --save-dev node-sass

# MÓDULO 05


	Neste capítulo aprendemos:
		
		: é modelo de databind de fontes da dados para view
		@ é um atalho de evento da  view para a fontes de dados.

		a diretiva v-on e como lidar com eventos do JavaScript
		atalho para diretiva v-on
		diferença de v-on para v-bind
		a filtrar uma lista
		compreender o uso de computed property
		que podemos acessar qualquer propriedade de data através de this
		a diretiva v-show
		detalhe entre v-show e slots
		como realizar transições com auxílio do componente transition
		a criar mais um componente

# MÓDULO 06
	-- npm install vue-router@2.1.1 --save

	Neste capítulo aprendemos:
    a criar um novo componente/página
    o conceito de Single Page Application
    extrair de App.vue um componente de página, separando responsabilidades
    a baixar e registrar o módulo VueRouter
    criar rotas da aplicação
    o componente router-view
    o modo history vs hash
    a criar um menu baseado em nossas configurações de rota
    a tornar o menu um componente
    executar efeito de transição na troca de páginas
    a validar propriedades em um componente



# MÓDULO 07

	Neste capítulo aprendemos:
		a criar um novo componente reutilizável
		a criar nossos próprios eventos
		a aplicar classes condicionalmente
		a diferença do valor passado para a propriedade de um componente sem bind e com bind
		a validar propriedades de componentes



=================================================================
=  								parte - 2                      =
=================================================================
# MÓDULO 01 - Criando nossa própria diretiva 

	Neste capitulo aprendemos:
		a criar diretivas
		passagem de parametros, pelo binding
		modificadores  e argumentos
	    e um pouco sobre VNODE.


# MÓDULO 02 - Lidando com formulários 

	Neste capítulo aprendemos:
	    a capturar dados inseridos em um formulário
	    o papel do modificador prevent na submissão de um formulário
	    a utilizar a diretiva v-model para two-way data binding
	    a criar e a utilizar modelos
	    enviar dados para uma API REST através do método post de $http



# MÓDULO 03 - Organizando ainda melhor nosso código 

	Neste capítulo aprendemos:
	    a usar o método delete para excluir recursos através da nossa API
	    a sincronizar o estado da exclusão da API no cliente
	    a aproveitar Vue.http.options.root e facilitar a manutenção
	    a utilizar $resource
	    a isolar $resource em serviços
	    rotas nomeadas e suas vantagens


# MÓDULO 04 - Lidando com alteração de dados 
	
	Neste capítulo aprendemos:
	    a criar rotas parametrizadas
	    a passar parâmetros para router-link
	    a extrair parâmetros de rota em um componente com $route.params
	    a realizarmos navegação programaticamente
	    a implementar uma lógica de alteração
	    boas práticas com mensagens e tratamento de erros
	    as diretivas v-if e v-else
	    diferença ente v-if/v-else e v-show


# MÓDULO 05 - Validando formulários (O módulo VeeValidate)	

	-- instalar  módulo VeeValidate)
		npm install vee-validate@2.0.0-beta.18 --save
		http://vee-validate.logaretm.com/#available-rules

	Neste capítulo aprendemos:
		a baixar e registrar o módulo VeeValidade
		validação através de template
		a lidar com localização


	
# MÓDULO 06 - O build do projeto 
	-- cpiar pasta dist e index.html para server/public
	-- npm run build

	Neste capítulo aprendemos:
		gerar os arquivos de distribuição do nosso projeto
		a realizar o deploy localmente
		a realizar code splitting e lazy loading
		
		

# MÓDULO 07 - Dicas e truques 
	

	
	-- install  bootstrap
		npm install bootstrap@3.3.7 --save
		
	--  install  loader (css e style)
		npm install css-loader@0.25.0 style-loader@0.13.1 --save-dev

	-- instal url loader
		npm install url-loader@0.5.7 --save-dev


	-- Vamos abrir o arquivo de configuração do webpack, no caso, o arquivo 
		alurapic/webpack.config.js:

		{
			test: /\.css$/,
			loader: 'style-loader!css-loader',
		},
		{ test: /\.(woff|woff2)(\?v=\d+\.\d+\.\d+)?$/, loader: 'url-loader?limit=10000&mimetype=application/font-woff' },
		{ test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/, loader: 'url-loader?limit=10000&mimetype=application/octet-stream' },
		{ test: /\.eot(\?v=\d+\.\d+\.\d+)?$/, loader: 'file-loader' },
		{ test: /\.svg(\?v=\d+\.\d+\.\d+)?$/, loader: 'url-loader?limit=10000&mimetype=image/svg+xml' }




	Aprendemos que um projeto criado com Vue CLI utiliza Webpack para criar os bundles do nosso projeto. Um ou mais bundles podem ser criados, dependendo se o recurso de code splitting foi utilizado ou não. Um dos bundles é o primeiro a ser carregado e a partir dele toda mágica do Vue.js ocorre dentro do nosso navegador.

	Por mais que nossos bundles serão arquivos JavaScript, eles também empacotam todo o CSS necessário pela aplicação. Por debaixo dos panos, quando a aplicação é carregada, os estilos são injetados no navegador através da tag style. No final, o resultado é o mesmo como se tivéssemos importados os estilos manualmente em index.html.

	No entanto, projetos criados com Vue CLI estão preparados apenas para lidar com os estilos definidos nos próprio componentes e caso queiramos carregar um arquivo CSS que não pertença a um componente precisaremos importá-lo em nosso projeto, como ele fosse um módulo. Não precisamos meditar muito que arquivos CSS não são modulares. É por isso que o Webpack precisa da ajuda de loaders para poder interpretar a importação de CSS's com a instrução import e adicioná-los no bundle do projeto.

	A comunidade Webpack já disponibiliza uma série de loaders com as mais diversas finalidades. Entre eles, os loaders css-loader e style-loader são o que precisamos para podermos importar arquivos CSS.

	Por fim, quando usamos a instrução import, se usarmos ./ estamos acessando arquivos ou pastas dentro da pasta src. Se omitirmos o ./ estamos acessando um módulo dentro da pasta node_modules.

   -- Install Sass
   npm install node-sass@4.5.0 sass-loader@4.1.1 --save-dev









	
	
	
	